                              == Functions ==
FETCH SINGLE PLAYER:
const fetchSinglePlayer = async (playerId) => {
  try {
    await fetch(`${BASE_URL}/players/${id}`, {
      method: "GET",
    });
    // const id = window.location.hash.slice(1);
    state.players = state.players.find((player) => player.id === +id);
  } catch (err) {
    console.error(`Oh no, trouble fetching player #${playerId}!`, err);
  }
};

ADD NEW PLAYER:
const addNewPlayer = async (playerObj) => {
  try {
    const promise = await fetch(API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(playerObj),
    });
    const response = await promise.json();
    console.log(response);

    if (!response.success) {
      throw response.error;
    }
    console.log(response.data);
    render();
  } catch (err) {
    console.error("Oops, something went wrong with adding that player!", err);
  }
};

REMOVE PLAYER: 
const removePlayer = async (playerId) => {
  try {
    // This playerId designation doesn't match the API reference(player-ID)
    await fetch(API_URL + "/" + playerId, {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
      },
    });
    render();
  } catch (err) {
    console.error(
      `Whoops, trouble removing player #${playerId} from the roster!`,
      err
    );
  }
};


                              == RENDERS ==
FORM:
async function renderNewPlayerForm() {
  // player.preventDefault();
  const formData = new FormData(form);
  try {
    const newPlayer = {
      name: formData.get("playerName"),
      breed: formData.get("playerBreed"),
      picture: formData.get("imageUrl"),
      team: formData.get("teamNumber"),
      // team needs a math.random to cap #s (default is null)
      // status: bench or field (needs a math.random)
      // playerId: needs to be a unused number (probably needs a math.random)
    };
    // await addNewPlayer(newPlayer);
    form.reset();
  } catch (err) {
    console.error("Uh oh, trouble rendering the new player form!", err);
  }
}

ALL PLAYERS:
 const playerElements = state.players.map((player) => {
    const playerCard = document.createElement("section");
    playerCard.innerHTML = `
        <div>
          <h3>${player.name}</h3>
          <p>${player.id}</p>
        </div>
      `;
    /**Removing the sticky wicket:
     * // const image = image.src = player.imageUrl;
     *   <p>${player.image}</p>
     */

    // Delete Button and Event Listener
    // const deleteButton = document.createElement("button");
    // deleteButton.innerText = "Delete Player";
    // playerCard.append(deleteButton);
    // deleteButton.addEventListener("click", () => removePlayer(player));
    
    return playerCard;
  });


  Another try:
    const playerElements = state.players.map((player) => {
    const playerCard = document.createElement("section");
    //H1 for Puppy Name:
    const h2 = document.createElement("h2");
    h2.textContent = player.name;

    //H2 for Puppy ID:
    const h3 = document.createElement("h3");
    h3.textContent = player.id;

    //Image of Puppy:
    const image = document.createElement("img");
    image.src = player.imageUrl; //set the img src to be the imageUrl from the artist object
    image.style.width = "50%";
    image.style.height = "50%";

    //Button to Delete the Puppy:
    const deleteButton = document.createElement("button");
    deleteButton.textContent = "Delete";
    deleteButton.style.display = "block";
    deleteButton.addEventListener("click", async () => {
      // await removePlayer(player);
    });

    playerCard.append(h1, h2, image, deleteButton);
    });

newPlayer:
  const newPlayer = {
      name: formData.get("playerName"),
      breed: formData.get("playerBreed"),
      picture: formData.get("imageUrl"),
      team: formData.get("teamNumber"),
      // team needs a math.random to cap #s (default is null)
      // status: bench or field (needs a math.random)
      // playerId: needs to be a unused number (probably needs a math.random)
  }

Form:
<label for="playerName">Name:</label>
        <input
          id="playerName"
          name="playerName"
          type="text"
          placeholder="New Puppy's Name"
          required
        />
        <label for="playerBreed">Puppy Breed:</label>
        <input
          id="playerBreed"
          name="playerBreed"
          type="text"
          placeholder="What breed is your puppy?"
        />
        <label> Picture: </label>
        <input type="text" name="imageUrl" placeholder="Image URL" />
        <!-- Not sure if the team # should be on the form or not -->
        <label> Pick a Puppy Team: </label>
        <input
          id="numberClear"
          name="teamNumber"
          type="number"
          min="1"
          max="2"
        />
        <button type="submit">Add Puppy</button>

         <div id="detailsSidepanel" class="sidepanel">
      <!-- <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">&times;</a> -->
    </div>